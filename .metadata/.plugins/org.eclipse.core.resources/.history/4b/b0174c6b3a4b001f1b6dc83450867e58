
package com.CBSUtil;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import com.DBTranDAO.DatabaseMaster;
import com.pojo.APY_MASTER_TRANSACTIONS;

public class Rural_CBSUtilAPY {
	public static Logger logger = Logger.getLogger(Rural_CBSUtilAPY.class);
	boolean isDone = false;
	DatabaseMaster databaseMaster = null;

//	private static Properties properties = null;
	private StringBuffer sbrRequest = null;
	private Rural_Util utils =  null;// new Rural_Util();
	String strTxnDate = "";
	String strInstDateFinal = "";
//	List<APY_MASTER_TRANSACTIONS> apy_MASTER_TRANSACTIONSs = null;
	// APY_MASTER_TRANSACTIONS apy_MASTER_TRANSACTIONS2 = null;
	Rural_Util rural_Util = new Rural_Util();
	String finalCBSRequest = null;
	char[] chars = null;
	int iBufferSize = 1536;
	Socket socket = null;
	String dateStart = null;
	String dateStop = null;
	String strNarrative = null;
	String strSupID = null;
	String strSupDateTime = null;
	String strTxnAmount1 = null;
	String strPaise = null;
	String strAmountRecieved = null;
	StringBuffer a_sReturn = null;

	public boolean prepareCBSString(APY_MASTER_TRANSACTIONS apy_MASTER_TRANSACTIONS, String siFrequency) {
		StringWriter stack =null;// new StringWriter();

		String newPaidDate = null;
		String transactionsType = null;
		boolean isPenaltyIncrement = false;
//		try {
//			properties = new Properties();
//			properties.load(PropertyMaster.getPropertyfile());
//		} catch (Throwable e) {
//			e.printStackTrace(new PrintWriter(stack));
//			logger.debug("Properties file not found : " + stack.toString());
//			logger.error("Properties file not found : ", e);
//			e.printStackTrace();
//		}

//		apy_MASTER_TRANSACTIONSs = new ArrayList<APY_MASTER_TRANSACTIONS>();
		int frequencyFactory = 0;

//		logger.debug("Starting Transaction For ");
		int pendingInstallmentsCount = Integer.parseInt(apy_MASTER_TRANSACTIONS.getPENALITY_INST_COUNT());
		if (siFrequency.equalsIgnoreCase("M"))
			frequencyFactory = 1;
		else if (siFrequency.equalsIgnoreCase("Q"))
			frequencyFactory = 3;
		else if (siFrequency.equalsIgnoreCase("H"))
			frequencyFactory = 6;
		else
			frequencyFactory = 1;
		String paidUptoDate = apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE();
		int month = 0;
		int n1 = DateMaster.getCurrentNumericMonth();
		if ((paidUptoDate != null)) {
			month = Integer.parseInt(paidUptoDate.substring(0, 2));
		} else {
			month = n1 - 1;
			paidUptoDate = String.valueOf(month) + "/" + DateMaster.getCurrentYear();
		}
		finalCBSRequest = null;
		int monthsDifference = 0;
		if ((paidUptoDate.substring(paidUptoDate.length() - 4)).equals(DateMaster.getCurrentYear()))
			monthsDifference = n1 - month;
		else {
			dateStart = paidUptoDate;
			dateStop = DateMaster.getCurrentDate();
			Date d1 = null;
			Date d2 = null;
			try {
				d1 = (new SimpleDateFormat("MM/yyyy")).parse(dateStart);
				d2 = (new SimpleDateFormat("dd/MM/yyyy")).parse(dateStop);
			} catch (ParseException e) {
				e.printStackTrace(new PrintWriter(stack));
				logger.debug("ParseException while formatting date : " + stack.toString());
				logger.error("Exception =:", e);
			}
			final Calendar d11 = Calendar.getInstance();
			d11.setTime(d1);
			final Calendar d22 = Calendar.getInstance();
			d22.setTime(d2);
			int diff = (d22.get(Calendar.YEAR) - d11.get(Calendar.YEAR)) * 12 + d22.get(Calendar.MONTH)
					- d11.get(Calendar.MONTH);
			monthsDifference = diff;
		}
		monthsDifference /= 1;
//		System.out.println("difference are--->" + monthsDifference);
		int temp2 = 0;
		for (int i = 1; ((i <= monthsDifference)
				&& ((DateMaster.getMonthAndYearfromString(apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE()).compareTo(
						DateMaster.getMonthAndYearfromString(DateMaster.getCurrentMonthAndYear()))) < 0)); i++) {

			strAmountRecieved = apy_MASTER_TRANSACTIONS.getCONTRIBUTION_AMT();
			apy_MASTER_TRANSACTIONS.setCOMPANY_ACC_NUMBER(
					PropertyMaster.getProperties().getProperty("APY_AC" + apy_MASTER_TRANSACTIONS.getBANK_CODE().trim()));
			apy_MASTER_TRANSACTIONS
					.setTELLER_ID(PropertyMaster.getProperties().getProperty("TellerNo" + apy_MASTER_TRANSACTIONS.getBANK_CODE()));
			strNarrative = apy_MASTER_TRANSACTIONS.getNARRATIVE();
			strSupID = apy_MASTER_TRANSACTIONS.getSUPERVISORID();
			strSupDateTime = apy_MASTER_TRANSACTIONS.getSUPDATETIME();
			strNarrative = strNarrative + " " + (apy_MASTER_TRANSACTIONS.getCUSTOMER_ACC_NUMBER()) + " "
					+ DateMaster.getCurrentMonth(
							(Integer.parseInt((apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE()).substring(0, 2))),
							siFrequency);
			strTxnAmount1 = strAmountRecieved;
			strTxnAmount1 = strTxnAmount1.replaceAll(",", "");
			strPaise = "";
			if (strTxnAmount1.contains(".")) {
				strPaise = strTxnAmount1.substring(strTxnAmount1.indexOf(".") + 1);
			} else {
				strPaise = "000";
			}
			try {
				if (strAmountRecieved.isEmpty())
					strAmountRecieved = "";
			} catch (NullPointerException npe) {
				strAmountRecieved = "";
			}
			try {
				if (strSupID.isEmpty())
					strSupID = "";
			} catch (NullPointerException npe) {
				strSupID = "";
			}
			try {
				if (strSupDateTime.isEmpty())
					strSupDateTime = "";
			} catch (NullPointerException npe) {
				strSupDateTime = "";
			}
			String strChar1 = "";
//			a_sReturn.append("");
			sbrRequest.setLength(0);
			//added by shubham
			a_sReturn.delete(0, a_sReturn.length());
			sbrRequest.append(utils.paddin(strChar1, 1, " ", "left"));
			sbrRequest.append("1053");
			sbrRequest.append(utils.paddin(strChar1, 20, " ", "left"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("SegmentNo"));
			sbrRequest.append(utils.paddin(strChar1, 2, " ", "left"));
			sbrRequest.append(utils.paddin(strChar1, 4, "0", "left"));
			sbrRequest.append(utils.paddin(strChar1, 6, " ", "left"));
			sbrRequest.append(utils.paddin("3", 3, "0", "left"));
			sbrRequest.append(utils.paddin(
					(PropertyMaster.getProperties().getProperty("BranchNo" + apy_MASTER_TRANSACTIONS.getBANK_CODE())), 5, "0", "left"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("WorkstationNo"));
			sbrRequest.append(utils.paddin(
					(PropertyMaster.getProperties().getProperty("TellerNo" + apy_MASTER_TRANSACTIONS.getBANK_CODE())), 7, "0", "left"));
			sbrRequest.append(utils.paddin((apy_MASTER_TRANSACTIONS.getTRAN_NUMBER()), 6, "0", "left"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("JournalNo"));
			sbrRequest.append(utils.paddin(strChar1, 5, " ", "left"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("Filler5"));
			sbrRequest.append(utils.paddin(strChar1, 2, " ", "left"));
			sbrRequest.append(utils.paddin("", 1, " ", "left"));
			sbrRequest.append(utils.paddin(strChar1, 2, " ", "left"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("BATCH-TANDEM"));
			sbrRequest.append(utils.paddin(strChar1, 3, " ", "left"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("Flag7"));
			sbrRequest.append(utils.paddin(strSupID, 7, "0", "left"));
			sbrRequest.append(utils.paddin(strSupDateTime, 8, " ", "left"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("CheckerId"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("ParentBancsLinkJournalNo"));
			sbrRequest.append(PropertyMaster.getProperties().getProperty("CheckerId1"));
			sbrRequest.append(utils.paddin(strChar1, 8, "0", "left"));
			sbrRequest.append(utils.paddin((apy_MASTER_TRANSACTIONS.getCUSTOMER_ACC_NUMBER()), 17, "0", "left"));
			sbrRequest.append(utils.paddin(strChar1, 18, " ", "left"));
			int amount = Integer.parseInt(strTxnAmount1);
			int penalityAmount = 0;
			int totalPenality = 0;
			penalityAmount = rural_Util.getPenaltyAmount(amount);
			if ((siFrequency.equalsIgnoreCase("M")) || (siFrequency.equalsIgnoreCase("Q"))
					|| (siFrequency.equalsIgnoreCase("H"))) {
				totalPenality = penalityAmount * pendingInstallmentsCount;
				apy_MASTER_TRANSACTIONS.setOVERDUEAMOUNT(String.valueOf(totalPenality));
				amount = amount + (totalPenality);
			}
			strTxnAmount1 = String.valueOf(amount);
			sbrRequest.append(utils.paddin(strTxnAmount1, 14, "0", "left"));
			sbrRequest.append(utils.paddin(strPaise, 3, "0", "left"));
			sbrRequest.append("+");
			sbrRequest.append(utils.paddin(strChar1, 10, " ", "left"));
			sbrRequest.append("NF");
			sbrRequest.append(
					utils.paddin((PropertyMaster.getProperties().getProperty("APY_AC" + apy_MASTER_TRANSACTIONS.getBANK_CODE().trim())), 17,
							"0", "left"));
			sbrRequest.append(utils.paddin(strChar1, 4, " ", "left"));
			sbrRequest.append(utils.paddin(strChar1, 4, "0", "left"));
			sbrRequest.append(utils.paddin(strChar1, 62, " ", "left"));
			sbrRequest.append("INR");
			sbrRequest.append(utils.paddin(strTxnAmount1, 14, "0", "left"));
			sbrRequest.append(utils.paddin(strPaise, 3, "0", "left"));
			sbrRequest.append("+");
			sbrRequest.append("INR");
			sbrRequest.append(utils.paddin(strTxnAmount1, 14, "0", "left"));
			sbrRequest.append(utils.paddin(strPaise, 3, "0", "left"));
			sbrRequest.append("+");
			sbrRequest.append(utils.paddin("0", 14, "0", "left"));
			sbrRequest.append(utils.paddin(strPaise, 3, "0", "right"));
			sbrRequest.append("+");
			sbrRequest.append(utils.paddin("0", 14, "0", "left"));
			sbrRequest.append(utils.paddin(strPaise, 3, "0", "right"));
			sbrRequest.append("+");
			sbrRequest.append("00");
			sbrRequest.append(utils.paddin(strChar1, 375, " ", "left"));
			sbrRequest.append(utils.paddin(strNarrative, 50, " ", "right"));
			sbrRequest.append(utils.paddin(strChar1, 132, " ", "left"));
			sbrRequest.append(utils.paddin(strChar1, 17, "0", "left"));
			sbrRequest.append(utils.paddin(strChar1, 96, " ", "left"));
			sbrRequest.append(utils.paddin(strChar1, 23, "0", "left"));
			finalCBSRequest = sbrRequest.toString();
			logger.debug("APY CBS Request ====>" + finalCBSRequest);
			PrintWriter pwout;
			BufferedReader brin;
			InputStreamReader ins;
			try {
//				socket = new Socket(
//						PropertyMaster.getProperties()
//								.getProperty("CBSIP" + apy_MASTER_TRANSACTIONS.getBANK_CODE().trim()).trim(),
//						Integer.parseInt(PropertyMaster.getProperties()
//								.getProperty("CBSPORT" + apy_MASTER_TRANSACTIONS.getBANK_CODE().trim()).trim()));
//				socket.setSoTimeout(50000);
//				socket.setReuseAddress(true);
//				ins = new InputStreamReader(socket.getInputStream());
//				brin = new BufferedReader(ins);
//				pwout = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())));
//				pwout.print(finalCBSRequest);
//				pwout.flush();
//				a_sReturn.setLength(0);
//				chars = new char[iBufferSize];
//				int numRead = 0;
//				while ((numRead = brin.read(chars)) > -1) {
//					a_sReturn.append(String.valueOf(chars, 0, numRead));
//					if (numRead < iBufferSize)
//						break;
//				}
//			
				  a_sReturn.append(
				  " 0208    0078            00000000000006003040000060999230001045000414663000045460200   00000000        000000000000000000000000000000080000 O.K.                 MGB-COLLECTION ACCOUNT-APY-NPS                      \r\n"
				);
////				  a_sReturn.
////				 append(" 1113    0983            00000000000007003000010070999230001045000000405000045470200   00000000        00000000000000000000000000000001ERR 3670 00 WDL NOT ALLW FOR SB BELOW 0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \r\n");			
////				

				logger.debug("APY CBS Response -->" + a_sReturn);

				apy_MASTER_TRANSACTIONS.setRequestString(finalCBSRequest);
				apy_MASTER_TRANSACTIONS.setResponseString(a_sReturn.toString());
				apy_MASTER_TRANSACTIONS.setJOURNAL_NUMBER((a_sReturn.toString()).substring(63, 72));

				String outputType = (a_sReturn.toString()).substring(133, 135);
				logger.debug("outputType is:" + outputType);
				apy_MASTER_TRANSACTIONS.setOutputType(outputType);

				if (outputType.equalsIgnoreCase("08")) {
					if (pendingInstallmentsCount > 0 && siFrequency.equalsIgnoreCase("M"))
						pendingInstallmentsCount--;

					if ((pendingInstallmentsCount >= 0 && (pendingInstallmentsCount <= 2))
							&& siFrequency.equalsIgnoreCase("Q")) {
						pendingInstallmentsCount = 0;
					} else if ((pendingInstallmentsCount > 2) && siFrequency.equalsIgnoreCase("Q")) {
						pendingInstallmentsCount = pendingInstallmentsCount - 3;
					}

					if ((pendingInstallmentsCount >= 0 && (pendingInstallmentsCount <= 5))
							&& siFrequency.equalsIgnoreCase("H")) {
						pendingInstallmentsCount = 0;
					} else if ((pendingInstallmentsCount > 5) && siFrequency.equalsIgnoreCase("H")) {
						pendingInstallmentsCount = pendingInstallmentsCount - 6;
					}

					newPaidDate = DateMaster.getNextPaidUptoDate((apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE()),
							frequencyFactory);
					apy_MASTER_TRANSACTIONS.setPAID_UPTO_DATE(newPaidDate);
					apy_MASTER_TRANSACTIONS.setPENALITY_INST_COUNT(String.valueOf(pendingInstallmentsCount));
					temp2 = Integer.parseInt(newPaidDate.substring(0, 2));
					apy_MASTER_TRANSACTIONS.setCONTRIBUTION_MONTH(DateMaster.getCurrentMonth(--temp2, siFrequency));
					apy_MASTER_TRANSACTIONS.setOutputType("08");
					transactionsType = apy_MASTER_TRANSACTIONS.getOutputType();
					apy_MASTER_TRANSACTIONS.setCONTRIBUTION_YEAR(
							DateMaster.getContributionYear(newPaidDate, siFrequency, transactionsType));

					logger.debug(apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE());
//					logger.debug(apy_MASTER_TRANSACTIONS.getCONTRIBUTION_MONTH());
					apy_MASTER_TRANSACTIONS.setCURR_STATUS("ACTIVE");

					isDone = databaseMaster.updateApyMasterTransactions(apy_MASTER_TRANSACTIONS);
					if (isDone) {
						logger.debug("Database Updated Successfully");
					} else {
						logger.debug("Database Update Failure");
						isDone = false;
					}

					isDone = databaseMaster.insertIntoContribution(apy_MASTER_TRANSACTIONS, siFrequency);
					if (isDone) {
						logger.debug("Records inserted into Contribution Table.");
					} else {
						logger.debug("Records inserted into Contribution Table.");
						isDone = false;
					}

				}

				else {
					apy_MASTER_TRANSACTIONS.setErrorMessage((a_sReturn.toString()).substring(139, 143) + " "
							+ (a_sReturn.toString()).substring(147, 170));
					apy_MASTER_TRANSACTIONS.setErrorCode((a_sReturn.toString()).substring(139, 143));
					apy_MASTER_TRANSACTIONS.setOutputType("20");
					transactionsType = apy_MASTER_TRANSACTIONS.getOutputType();
					apy_MASTER_TRANSACTIONS.setCONTRIBUTION_MONTH(DateMaster.getCurrentMonth(
							(Integer.parseInt((apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE()).substring(0, 2))),
							siFrequency));
					apy_MASTER_TRANSACTIONS.setCONTRIBUTION_YEAR(DateMaster.getContributionYear(
							(apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE()), siFrequency, transactionsType));

					if (DateMaster.getMaxDayfromMonth()) {
						isPenaltyIncrement = true;
						if (isPenaltyIncrement) {
							int dateComparator = 1;
							String strlastPenaltyUpdated = null;
							try {
								strlastPenaltyUpdated = apy_MASTER_TRANSACTIONS.getPENALTY_COUNT_UPDATED_ON();
							} catch (NullPointerException np) {
								strlastPenaltyUpdated = null;
							}
							if (strlastPenaltyUpdated != null)
								dateComparator = DateMaster
										.getDatefromString(apy_MASTER_TRANSACTIONS.getPENALTY_COUNT_UPDATED_ON())
										.compareTo(DateMaster.getDatefromString(DateMaster.getCurrentDate()));
							if (dateComparator != 0) {
								pendingInstallmentsCount++;
								apy_MASTER_TRANSACTIONS
										.setPENALITY_INST_COUNT(String.valueOf(pendingInstallmentsCount));
								apy_MASTER_TRANSACTIONS.setPENALTY_COUNT_UPDATED_ON(DateMaster.getCurrentDate());
							}
						}
					}
					isDone = databaseMaster.updateApyMasterTransactions(apy_MASTER_TRANSACTIONS);
					if (isDone) {
						logger.debug("Database Updated Successfully");
					} else {
						logger.debug("Database Update Failure");
						isDone = false;
					}

					isDone = databaseMaster.insertIntoContribution(apy_MASTER_TRANSACTIONS, siFrequency);
					if (isDone) {
						logger.debug("Records inserted into Contribution Table.");
					} else {
						logger.debug("Records failed to insert in Contribution Table.");
						isDone = false;
					}
//					logger.debug("breaking the loop due to cbs for PRAN:-"+apy_MASTER_TRANSACTIONS.getPRAN_NO()+" CBS_ERROR:-"+(a_sReturn.toString()).substring(139, 143) + " "
//							+ (a_sReturn.toString()).substring(147, 170));
//					System.out.println(
//							"breaking the loop due to cbs error for PRAN:-" + apy_MASTER_TRANSACTIONS.getPRAN_NO());
					break;
				}

			} catch (Exception ex) {
				try {
					ex.printStackTrace(new PrintWriter(stack));
					logger.debug("In Bank's CBS is not reachable Exception: " + stack.toString());
					ex.printStackTrace();
					apy_MASTER_TRANSACTIONS.setErrorMessage("Bank's CBS is not reachable");
					apy_MASTER_TRANSACTIONS.setErrorCode("0001");
					apy_MASTER_TRANSACTIONS.setOutputType("20");
					transactionsType = apy_MASTER_TRANSACTIONS.getOutputType();
					apy_MASTER_TRANSACTIONS.setCONTRIBUTION_MONTH(DateMaster.getCurrentMonth(
							(Integer.parseInt((apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE()).substring(0, 2))),
							siFrequency));
					apy_MASTER_TRANSACTIONS.setCONTRIBUTION_YEAR(DateMaster.getContributionYear(
							(apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE()), siFrequency, transactionsType));

					if (DateMaster.getMaxDayfromMonth()) {
						isPenaltyIncrement = true;
						if (isPenaltyIncrement) {
							int dateComparator = 1;
							String strlastPenaltyUpdated = null;
							try {
								strlastPenaltyUpdated = apy_MASTER_TRANSACTIONS.getPENALTY_COUNT_UPDATED_ON();
							} catch (NullPointerException np) {
								strlastPenaltyUpdated = null;
							}
							if (strlastPenaltyUpdated != null)
								dateComparator = DateMaster
										.getDatefromString(apy_MASTER_TRANSACTIONS.getPENALTY_COUNT_UPDATED_ON())
										.compareTo(DateMaster.getDatefromString(DateMaster.getCurrentDate()));
							if (dateComparator != 0) {
								pendingInstallmentsCount++;
								apy_MASTER_TRANSACTIONS
										.setPENALITY_INST_COUNT(String.valueOf(pendingInstallmentsCount));
								apy_MASTER_TRANSACTIONS.setPENALTY_COUNT_UPDATED_ON(DateMaster.getCurrentDate());
							}
						}
					}
					isDone = databaseMaster.updateApyMasterTransactions(apy_MASTER_TRANSACTIONS);
					if (isDone) {
						logger.debug("Database Updated Successfully");

					} else {
						logger.debug("Database Update Failure");
						isDone = false;
					}

					isDone = databaseMaster.insertIntoContribution(apy_MASTER_TRANSACTIONS, siFrequency);
					if (isDone) {
						logger.debug("Records inserted into Contribution Table.");
					} else {
						logger.debug("Records inserted into Contribution Table.");
						isDone = false;
					}
					
//					logger.debug("breaking the loop due to cbs for PRAN:-"+apy_MASTER_TRANSACTIONS.getPRAN_NO());
////					System.out.println("breaking the loop due to cbs error for PRAN:-"+apy_MASTER_TRANSACTIONS.getPRAN_NO());
					break;

				} catch (Exception ex1) {
					ex1.printStackTrace(new PrintWriter(stack));
					logger.debug("Exception ex1  : " + stack.toString());
					ex1.printStackTrace();
					logger.debug(apy_MASTER_TRANSACTIONS);
				}
				ex.printStackTrace();
			} finally {
				try {
					if (socket != null)
						socket.close();
				} catch (Exception e) {
					logger.error("Exception -- ", e);

				}
			}
		}

		if (!((DateMaster.getMonthAndYearfromString(apy_MASTER_TRANSACTIONS.getPAID_UPTO_DATE())
				.compareTo(DateMaster.getMonthAndYearfromString(DateMaster.getCurrentMonthAndYear()))) < 0)) {
			logger.debug("ALL APY SI are cleared for Pran:" + apy_MASTER_TRANSACTIONS.getPRAN_NO());
		}
		
//		System.gc();

		return isDone;
	}
}
